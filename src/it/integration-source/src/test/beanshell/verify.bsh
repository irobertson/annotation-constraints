import java.util.regex.Pattern;

import org.hamcrest.Matcher;
import org.hamcrest.Matchers;

import org.annotationconstraints.test.ContainsRegExMatcher;
import org.annotationconstraints.test.FileAssert;

String localBasedir = basedir.getPath().split("../integration-source")[0];
File buildLog = new File(localBasedir, "build.log");
FileAssert file = new FileAssert(buildLog);

file.assertNoLineMatches(new Matcher[] {
  Matchers.containsString("IllegalStateException"),
  Matchers.containsString("RuntimeException"),
  Matchers.containsString("Fatal error compiling"),
  Matchers.containsString("Internal compiler error"),
  Matchers.containsString("Pass") //naming convention for classes which should compile cleanly
});

Matcher containsMessage(String level, String message) {
  return ContainsRegExMatcher.containsMatch(Pattern.compile("^\\[" + level + "\\].+" + Pattern.quote(message) + "$"));
}

Matcher containsError(String message) {
  return containsMessage("ERROR", message);
}

//TODO Eclipse messages are multiline so warnings cannot be validated using this line-by-line approach. Errors just happen to be output by Maven with "[ERROR] ...".

file.assertAnyLineMatches(new Matcher[] {
  containsError("companionannotations.RequireUnconstrainedFail is annotated with @RequireUnconstrained but not with @Unconstrained"),
  containsError("companionannotations.RequireMultipleFailOne is annotated with @RequireMultiple but not with @Unconstrained"),
  containsError("companionannotations.RequireMultipleFailAll is annotated with @RequireMultiple but not with @Unconstrained and @RequireNoArgConstructor"),
  Matchers.containsString("companionannotations.RecommendUnconstrainedFail is annotated with @RecommendUnconstrained but not with @Unconstrained"),
  Matchers.containsString("companionannotations.RecommendMultipleFailOne is annotated with @RecommendMultiple but not with @Unconstrained"),
  Matchers.containsString("companionannotations.RecommendMultipleFailAll is annotated with @RecommendMultiple but not with @Unconstrained and @RequireNoArgConstructor"),
  containsError("disallowannotations.DisallowUnconstrainedFail is annotated with @DisallowUnconstrained which is not allowed with @Unconstrained"),
  containsError("disallowannotations.DisallowMultipleFailOne is annotated with @DisallowMultiple which is not allowed with @Unconstrained"),
  containsError("disallowannotations.DisallowMultipleFailAll is annotated with @DisallowMultiple which is not allowed with @Unconstrained or @RequireNoArgConstructor"),
  containsError("requireannotationsonsupertype.RequireAnnotationsOnSupertypeFail is annotated with @RequireUnconstrainedSupertype but does not have a supertype annotated with @Unconstrained or @RequireUnconstrained"),
  containsError("requireconstructors.RequireNoArgConstructorFail is annotated with @RequireNoArgConstructor but does not have a constructor with no arguments"),
  containsError("requireconstructors.RequireStringLongIntArrayConstructorFail is annotated with @RequireStringLongIntArrayConstructor but does not have a constructor with arguments (java.lang.String, long, int[])"),
  containsError("requireconstructors.RequireCallableConstructorFail is annotated with @RequireCallableConstructor but does not have a constructor with arguments (java.util.concurrent.Callable)"),
  containsError("requiresupertypes.RequireSupertypesFail is annotated with @RequireBaseClassAndSerializable but does not have BaseClass or Serializable as a supertype"),
  containsError("requiresupertypes.RequireGenericInterfaceFail is annotated with @RequireGenericInterface but does not have GenericInterface as a supertype"),
  containsError("Failing CustomVerifyFail.class from CustomVerifier"),
  containsError("provider.ExternalProviderFail is annotated with @Entity but does not have a constructor with no arguments as specified by provider.EntityProxy"),
  containsError("provider.InternalProviderFail is annotated with @Table but not with @Entity as specified by provider.TableProxy"),
  containsError("nestedclasses.Containing.NestedClassFail is annotated with @RequireNoArgConstructor but does not have a constructor with no arguments"),
  containsError("nestedclasses.Containing.NestedConstrainedFail is annotated with @NestedConstrained but does not have Serializable as a supertype"),
  containsError("Failing NestedVerifierFail.class from NestedVerifier"),
  containsError("verifier.ReservedPathFail is annotated with @Path using a reserved path: /health as specified by provider.PathConstraintProvider"),
  containsError("Error instantiating verifier verifier.UninstantiableVerifier which is required for verifier.UninstantiableVerifierConstrained due to an exception: verifier.BrokenVerifierException: UninstantiableVerifier is not instantiable"),
  containsError("Verifier class verifier.BrokenVerifier threw an exception: verifier.BrokenVerifierException: BrokenVerifier is broken"),
  Matchers.anyOf( //TODO javac only reports a single error for the annotation, but eclipse reports both
    containsError("example.Person is annotated with @Model but does not have AbstractModel as a supertype"),
    containsError("example.Person is annotated with @Model but does not have a constructor with no arguments")),
  containsError("example.ApplicationPathFail is annotated with @ApplicationPath but does not have Application as a supertype as specified by example.ApplicationPathConstraints")
});